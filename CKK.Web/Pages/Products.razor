@using CKK.Logic.Models;
@using CKK.DB.UOW;
@using CKK.DB.Interfaces;
@inject NavigationManager NavManager

@page "/products"

<form method="get">
	<input type="hidden" value="@order.OrderId" />
	<p style="color: blue; font-size: x-large">Products all year long.</p>
	<div class="row">
		@foreach (var item in uow.Products.GetAll())
		{
			<div class="card" style="width: 18rem; padding: 5px;">
				<div class="card-body">
					<h5 class="card-title text-center">@item.Name</h5>
					<p class="card-text">@item.Price.ToString("c")</p>
					<p class="card-text">Quantity Available: @item.Quantity</p>
					<br />
				</div>
				<div class="card-footer">
					<div class="text-center">
						<input class="num-spinner" id="spinner-@item.Id" @onchange="@(e => spinnerChange(item.Id, e.Value))"
							   style="padding: 10px; width: 75%;" type="number" value="0" min="0" max="@item.Quantity" step="1" />
						<button @onclick="AddToCart" class="btn btn-success btn-lg btn-block" style="margin-top: 10px;">
							Add To Cart
						</button>
					</div>
				</div>
			</div>
		}
	</div>
</form>

@code {
	private Order order;

	[Inject]
	private IUnitOfWork uow { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		if (uow != null)
		{
			order = uow.Orders.GetById(1);
			if (order == null)
			{
				Order newOrder = new Order() { OrderId = 1, OrderNumber = "1", CustomerId = 1, ShoppingCartId = 100 };
				order = newOrder;
				uow.Orders.Add(newOrder);
			}
		}
	}

	protected void spinnerChange(int productId, object value)
	{
		var item = uow.ShoppingCarts.AddToCart(order.ShoppingCartId, productId, Convert.ToInt16(value));
	}

	protected void AddToCart()
	{
		var inventory = uow.Products.GetAll();

		var cartItems = uow.ShoppingCarts.GetProducts(order.ShoppingCartId);
		foreach (var item in cartItems)
		{
			Product prod = inventory.Where(x => x.Id == item.ProductId).FirstOrDefault();
			prod.Quantity -= item.Quantity;
			uow.Products.Update(prod);
		}
	}
}
